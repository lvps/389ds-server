---
- name: Configure LDAPI settings
  block:
    - name: Set configuration to enable LDAPI
      ansible.builtin.set_fact:
        dirsrv_ldapi_config:
          nsslapd-ldapilisten: "on"
          nsslapd-ldapifilepath: "{% if dirsrv_rundir is defined %}{{ dirsrv_rundir }}{% else %}/var/run{% endif %}/slapd-{{ dirsrv_serverid }}.socket"
          nsslapd-ldapiautobind: "on"
          nsslapd-ldapimaptoentries: "off"
      when: dirsrv_ldapi_enabled|bool

    - name: Set configuration to disable LDAPI
      ansible.builtin.set_fact:
        dirsrv_ldapi_config:
          nsslapd-ldapilisten: "off"
          nsslapd-ldapiautobind: "off"
      when: not dirsrv_ldapi_enabled

    - name: Configure LDAPI
      community.general.ldap_attrs:
        server_uri: "{{ dirsrv_server_uri }}"
        validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
        start_tls: "{{ dirsrv_starttls_early }}"
        bind_dn: "{{ dirsrv_rootdn }}"
        bind_pw: "{{ dirsrv_rootdn_password }}"
        dn: "cn=config"
        attributes: "{{ dirsrv_ldapi_config }}"
        state: exact
      register: dirsrv_restart_condition_auth_1

  rescue:
    - name: Configure LDAPI over LDAPI
      community.general.ldap_attrs:
        server_uri: "{{ dirsrv_ldapi_uri }}"
        bind_dn: "{{ dirsrv_rootdn }}"
        bind_pw: "{{ dirsrv_rootdn_password }}"
        dn: "cn=config"
        attributes: "{{ dirsrv_ldapi_config }}"
        state: exact
      register: dirsrv_restart_condition_auth_2

# Documentation: https://directory.fedoraproject.org/docs/389ds/design/sasl-mechanism-configuration.html
# TODO: "none" means "everything is allowed"... how to allow none (or just EXTERNAL that is always enabled but not always allowed or whatever?)
- name: Configure SASL mechanisms
  block:
    - name: Configure SASL
      community.general.ldap_attrs:
        server_uri: "{{ dirsrv_server_uri }}"
        validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
        start_tls: "{{ dirsrv_starttls_early }}"
        bind_dn: "{{ dirsrv_rootdn }}"
        bind_pw: "{{ dirsrv_rootdn_password }}"
        dn: "cn=config"
        attributes:
          nsslapd-allowed-sasl-mechanisms: "{{ 'PLAIN' if dirsrv_sasl_plain_enabled else [] }}"
        state: exact
      register: dirsrv_sasl_result

  rescue:
    # Deleting an attribute fails if the the attribute doesn't exist,
    # yay for idempotence...
    - name: Assert that task failed successfully
      ansible.builtin.assert:
        that:
          - not dirsrv_sasl_result.changed
          - "'desc' in dirsrv_sasl_result.details"
          - "{{ dirsrv_sasl_result.details }}.desc == 'No such attribute'"

- name: Configure password storage settings
  block:
    # With 389DS version 1.4.X the option to delete this attribute to reset it to the default value has been removed.
    # Instead, we have to set it to "DEFAULT" (case sensitive).
    - name: Normalize password storage scheme
      no_log: true  # Could be logged but ansible-lint complains as it detects the word "password"
      ansible.builtin.set_fact:
        dirsrv_normalized_password_storage_scheme: >-
          {% if not dirsrv_legacy and dirsrv_password_storage_scheme == [] %}DEFAULT{% else %}{{ dirsrv_password_storage_scheme }}{% endif %}

    # if we use DEFAULT as password value to reset the field in 389DS 1.4.X we fail idempotence tests since "DEFAULT" is different from whatever scheme is currently used
    # as DEFAULT itself get instantly converted in the name of an actual password storage scheme. Therefore, to determine if the task actually changed, we compare the value before and after
    # instead of relying on the attribute change task to report its status
    - name: Configure password storage scheme
      community.general.ldap_attrs:
        server_uri: "{{ dirsrv_server_uri }}"
        validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
        start_tls: "{{ dirsrv_starttls_early }}"
        bind_dn: "{{ dirsrv_rootdn }}"
        bind_pw: "{{ dirsrv_rootdn_password }}"
        dn: "cn=config"
        attributes:
          passwordStorageScheme: "{{ dirsrv_normalized_password_storage_scheme }}"
        state: exact
      register: dirsrv_pwdstorage_result
      when: dirsrv_normalized_password_storage_scheme != "DEFAULT"

    # This is not perfect: for example if we are using the playbook to reset the storage scheme to the default value after
    # having previously altered it to a different value, however there is no way known to us in vanilla ansible to query an
    # LDAP attribute value and therefore we can't make a comparison to check wether the value actually changed or not.
    - name: Reset password storage scheme (389DS 1.4.X)
      community.general.ldap_attrs:
        server_uri: "{{ dirsrv_server_uri }}"
        validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
        start_tls: "{{ dirsrv_starttls_early }}"
        bind_dn: "{{ dirsrv_rootdn }}"
        bind_pw: "{{ dirsrv_rootdn_password }}"
        dn: "cn=config"
        attributes:
          passwordStorageScheme: "{{ dirsrv_normalized_password_storage_scheme }}"
        state: exact
      register: dirsrv_pwdstorage_result
      when: dirsrv_normalized_password_storage_scheme == "DEFAULT"
      changed_when: false

  rescue:
    # Same as above
    - name: Assert that task failed successfully
      ansible.builtin.assert:
        that:
          - not dirsrv_pwdstorage_result.changed
          - "'desc' in dirsrv_pwdstorage_result.details"
          - "{{ dirsrv_pwdstorage_result.details }}.desc == 'No such attribute'"
