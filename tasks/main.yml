---
# TODO: cn=config contains nsslapd-requiresrestart, a list of things that need a restart. Check that all of them have "notify: dirsrv restart"...

# TODO: are nsCertFile and nsKeyFile still allowed, instead of the NSS database which is nearly impossible to handle correctly?
# https://www.port389.org/docs/389ds/howto/howto-ssl.html

- name: Import 389DS installation tasks
  ansible.builtin.import_tasks: install_389ds.yml

- name: Check that tls_enforced makes sense
  ansible.builtin.assert:
    that:
      - dirsrv_tls_enabled or dirsrv_selfsigned_cert
    msg: "dirsrv_tls_enforced: true doesn't make sense when dirsrv_tls_enabled: false, enable TLS or disable enforcing"
  when: dirsrv_tls_enforced | bool
  tags: [ dirsrv_tls ]

- name: Configure LDAP server settings
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]
  block:
    - name: Read LDAP server configuration
      ansible.builtin.slurp:
        src: /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif
      register: dirsrv_ldif_base64

    - name: Check auth-related server configuration
      ansible.builtin.set_fact:
        dirsrv_ldapilisten_enabled: >-
          {{ dirsrv_ldif_base64.content | b64decode |
          regex_search('(?m)^nsslapd-ldapilisten:.*$')
          == 'nsslapd-ldapilisten: on' }}
        dirsrv_tls_ldapi_filepath: >-
          {{ dirsrv_ldif_base64.content | b64decode |
                 regex_search('(?m)^nsslapd-ldapifilepath:.*$') |
                 regex_replace('^[^:]*: ', '') }}
        dirsrv_tls_enforced_initially_binds: >-
          {{ dirsrv_ldif_base64.content | b64decode |
                 regex_search('(?m)^nsslapd-require-secure-binds:.*$')
             == 'nsslapd-require-secure-binds: on' }}
        dirsrv_tls_enforced_initially_ssf: >-
          {{ dirsrv_ldif_base64.content | b64decode |
                 regex_search('(?m)^nsslapd-minssf:.*$') |
                 regex_replace('^[^:]*: ', '') }}
        dirsrv_ldapi_uri: >-
          {{ "ldapi://" ~
             ( ( dirsrv_rundir | default("/var/run") ) ~
               "/slapd-" ~ dirsrv_serverid ~ ".socket" ) | quote_plus }}

    - name: Prepare LDAP auth data
      ansible.builtin.set_fact:
        dirsrv_starttls_early: >-
          {{ not dirsrv_ldapilisten_enabled and
             ( dirsrv_tls_enforced_initially_binds or
               dirsrv_tls_enforced_initially_ssf | int > 0 ) }}
        dirsrv_server_uri: >-
          {{ dirsrv_ldapi_uri if dirsrv_ldapilisten_enabled
                              else dirsrv_server_uri }}

- name: Configure listen address
  community.general.ldap_attrs:
    server_uri: "{{ dirsrv_server_uri }}"
    validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
    start_tls: "{{ dirsrv_starttls_early }}"
    bind_dn: "{{ dirsrv_rootdn }}"
    bind_pw: "{{ dirsrv_rootdn_password }}"
    dn: "cn=config"
    attributes:
      nsslapd-listenhost: "{{ dirsrv_listen_host }}"
    state: exact
  register: dirsrv_restart_condition_main
  when: dirsrv_listen_host != None

- name: Import authentication configuration
  ansible.builtin.import_tasks: configure_authentication.yml
  when: not dirsrv_factory

- name: Import logging configuration
  ansible.builtin.import_tasks: configure_logging.yml
  when: not dirsrv_factory

- name: Import plugins configuration
  ansible.builtin.import_tasks: configure_plugins.yml

- name: Import schema configuration
  ansible.builtin.import_tasks: configure_schema.yml

- name: Import TLS configuration
  ansible.builtin.import_tasks: configure_tls.yml

# Required also to enforce TLS as TLS must be enabled beforehand (requiring a restart).
- name: Enable TLS, authentication, and plugins
  ansible.builtin.service:
    name: "dirsrv@{{ dirsrv_serverid }}"
    state: restarted
  # Cannot use an handler due to https://github.com/lvps/389ds-server/issues/16
  # Cannot use use any fancy woarkaround due to https://github.com/ansible/ansible/issues/63822
  # Cannot use a generic name for the handler since https://github.com/lvps/389ds-server/pull/14, it *has* to be tied to the server
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]
  when: "(dirsrv_restart_condition_main is defined and dirsrv_restart_condition_main.changed) or\
        (dirsrv_restart_condition_plugins_1 is defined and dirsrv_restart_condition_plugins_1.changed) or\
        (dirsrv_restart_condition_plugins_2 is defined and dirsrv_restart_condition_plugins_2.changed) or\
        (dirsrv_restart_condition_plugins_3 is defined and dirsrv_restart_condition_plugins_3.changed) or\
        (dirsrv_restart_condition_plugins_4 is defined and dirsrv_restart_condition_plugins_4.changed) or\
        (dirsrv_restart_condition_auth_1 is defined and dirsrv_restart_condition_auth_1.changed) or\
        (dirsrv_restart_condition_auth_2 is defined and dirsrv_restart_condition_auth_2.changed) or\
        (dirsrv_restart_condition_tls_1 is defined and dirsrv_restart_condition_tls_1.changed) or\
        (dirsrv_restart_condition_tls_2 is defined and dirsrv_restart_condition_tls_2.changed) or\
        (dirsrv_restart_condition_tls_3 is defined and dirsrv_restart_condition_tls_3.changed) or\
        (dirsrv_restart_condition_tls_4 is defined and dirsrv_restart_condition_tls_4.changed) or\
        (dirsrv_restart_condition_tls_5 is defined and dirsrv_restart_condition_tls_5.changed) or\
        (dirsrv_restart_condition_tls_6 is defined and dirsrv_restart_condition_tls_6.changed)"
  register: dirsrv_restart_condition_has_restarted

- name: "Reload schema on {{ dirsrv_serverid }}"
  community.general.ldap_entry:
    server_uri: "{{ dirsrv_server_uri }}"
    validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
    start_tls: "{{ dirsrv_tls_enforced }}"
    bind_dn: "{{ dirsrv_rootdn }}"
    bind_pw: "{{ dirsrv_rootdn_password }}"
    dn: "cn=ansible-managed schema reload,cn=schema reload task,cn=tasks,cn=config"
    objectClass:
      - extensibleObject
    attributes:
      cn: ansible-managed schema reload
      schemadir: "/etc/dirsrv/slapd-{{ dirsrv_serverid }}/schema/"
    state: present
  tags: dirsrv_schema
  when: "not dirsrv_restart_condition_has_restarted|default(false) and (\
        (dirsrv_restart_condition_schema_reload_1 is defined and dirsrv_restart_condition_schema_reload_1.changed) or\
        (dirsrv_restart_condition_schema_reload_2 is defined and dirsrv_restart_condition_schema_reload_2.changed)\
        )"

- name: Import TLS enforcing configuration
  ansible.builtin.import_tasks: configure_tls_enforcing.yml

# This only happens if TLS is being enforced.
- name: Enforce TLS for server {{ dirsrv_serverid }}
  ansible.builtin.service:
    name: "dirsrv@{{ dirsrv_serverid }}"
    state: restarted
  when: "(dirsrv_restart_condition_tls_enforcing_1 is defined and dirsrv_restart_condition_tls_enforcing_1.changed) or\
        (dirsrv_restart_condition_tls_enforcing_2 is defined and dirsrv_restart_condition_tls_enforcing_2.changed)"
