---
- name: Import SUSE-specific installation tasks
  ansible.builtin.import_tasks: tasks/install_389ds_suse.yml
  when: "ansible_facts['os_family'] == 'Suse'"

- name: Import RHEL 7 installation tasks
  ansible.builtin.import_tasks: tasks/install_389ds_EL7.yml
  when: >-
    ansible_facts['os_family'] == 'RedHat' and
    ansible_facts['distribution_major_version'] | int == 7

- name: Import RHEL 8+ installation tasks
  ansible.builtin.import_tasks: tasks/install_389ds_EL8.yml
  when: >-
    ansible_facts['os_family'] == 'RedHat' and
    ansible_facts['distribution_major_version'] | int >= 8

- name: Determine installed server type (1.3.X or 1.4.X)
  ansible.builtin.set_fact:
    dirsrv_legacy: "{{ dirsrv_package_version is version('1.4.0', '<') }}"

# as suggested by Red Hat Directory Server manual
- name: Add user 'dirsrv'
  ansible.builtin.user:
    name: dirsrv
    group: dirsrv
    comment: System user for 389DS
    shell: /sbin/nologin
    system: true
    create_home: false
  when: dirsrv_legacy

- name: Check if instance directory exists
  ansible.builtin.stat:
    path: "/var/lib/dirsrv/slapd-{{ dirsrv_serverid }}"
  register: dirsrv_instance_dir

- name: Check instance directory status for {{ dirsrv_serverid }}
  ansible.builtin.set_fact:
    dirsrv_instance_dir_exists: "{{ dirsrv_instance_dir.stat.exists and dirsrv_instance_dir.stat.isdir }}"

- name: Configure 389DS installation
# TODO: How do we change the Directory Manager password if we need it to change the password?
  block:
    # We have two distinct templates for the two versions of 389DS' install.inf format
    - name: Determine right template to use for install.inf
      ansible.builtin.set_fact:
        dirsrv_install_template: '{% if dirsrv_legacy %}install-v1.inf.j2{% else %}install-v2.inf.j2{% endif %}'

    - name: Copy installation template
      ansible.builtin.template:
        src: templates/{{ dirsrv_install_template }}
        dest: /tmp/install.inf
        mode: '600'
      when: not dirsrv_instance_dir_exists

    - name: Copy additional ldif files (setup-ds.pl)
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{% if dirsrv_legacy %}/tmp/{% else %}{{ dirsrv_install_additional_ldif_dir }}/{% endif %}{{ item | basename }}"
        remote_src: "{{ dirsrv_ldif_files_remote }}"
        mode: '400'
        owner: dirsrv
        group: dirsrv
      when:
        - not dirsrv_instance_dir_exists
        - dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    - name: Set SELinux context for additional ldif files (setup-ds.pl)
      community.general.sefcontext:
        setype: "{{ dirsrv_selinux_setype }}"
        seuser: "{{ dirsrv_selinux_seuser }}"
        state: present
        target: "{% if dirsrv_legacy %}/tmp/{% else %}{{ dirsrv_install_additional_ldif_dir }}/{% endif %}{{ item | basename }}"
      when:
        - not dirsrv_instance_dir_exists
        - ansible_selinux is defined
        - ansible_selinux.status == 'enabled'
        - dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    - name: Apply new SELinux file context to filesystem (setup-ds.pl)
      ansible.builtin.command: "restorecon -irv {% if dirsrv_legacy %}/tmp/{% else %}{{ dirsrv_install_additional_ldif_dir }}/{% endif %}{{ item | basename }}"
      changed_when: false
      when:
        - not dirsrv_instance_dir_exists
        - ansible_selinux is defined
        - ansible_selinux.status == 'enabled'
        - dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    # This will install the Directory Server *only*.
    # No Configuration Directory Server: it's documented but it doesn't really exist (it's part of the Administration Server).
    # No Administration Server: it isn't worth the effort.
    - name: Run installation script (setup-ds.pl)
      ansible.builtin.command: /usr/sbin/setup-ds.pl -s -f /tmp/install.inf
      become: true
      changed_when: true
      when:
        - not dirsrv_instance_dir_exists
        - dirsrv_legacy

    # On newer versions of 389DS setup-ds.pl got deprecated and separated in a legacy package
    # Here we're using the modern equivalent, with a completely different API...
    - name: Run installation script (dscreate)
      ansible.builtin.command: /usr/sbin/dscreate from-file /tmp/install.inf
      become: true
      changed_when: true
      when:
        - not dirsrv_instance_dir_exists
        - not dirsrv_legacy

    - name: Copy additional ldif files (dsconf)
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ dirsrv_install_additional_ldif_dir }}/{{ item | basename }}"
        remote_src: "{{ dirsrv_ldif_files_remote }}"
        mode: '400'
        owner: dirsrv
        group: dirsrv
      when:
        - not dirsrv_instance_dir_exists
        - not dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    - name: Set SELinux context for additional ldif files (dsconf)
      community.general.sefcontext:
        setype: "{{ dirsrv_selinux_setype }}"
        seuser: "{{ dirsrv_selinux_seuser }}"
        state: present
        target: "{{ dirsrv_install_additional_ldif_dir }}/{{ item | basename }}"
      when:
        - not dirsrv_instance_dir_exists
        - ansible_selinux is defined
        - ansible_selinux.status == 'enabled'
        - not dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    - name: Apply new SELinux file context to filesystem (dsconf)
      ansible.builtin.command: "restorecon -irv {{ dirsrv_install_additional_ldif_dir }}/{{ item | basename }}"
      changed_when: false
      when:
        - not dirsrv_instance_dir_exists
        - ansible_selinux is defined
        - ansible_selinux.status == 'enabled'
        - not dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    # The newer version of the install.ini file does not have a InstallLdifFile object anymore
    # So we manually install extra ldifs later
    - name: Install additional ldif files (dsconf)
      ansible.builtin.command: >
        /usr/sbin/dsconf
        {{ dirsrv_serverid }}
        backend import
        {{ dirsrv_bename }}
        {{ dirsrv_install_additional_ldif_dir }}/{{ item | basename }}
      changed_when: true
      when:
        - not dirsrv_instance_dir_exists
        - not dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"

    - name: Delete temporary additional ldif files (dsconf)
      ansible.builtin.file:
        path: "{{ dirsrv_install_additional_ldif_dir }}/{{ item | basename }}"
        state: absent
      when:
        - not dirsrv_instance_dir_exists
        - not dirsrv_legacy
      loop: "{{ dirsrv_install_additional_ldif }}"
  always:
    - name: Remove installation template
      ansible.builtin.file:
        state: absent
        path: /tmp/install.inf

- name: Start and enable instance for 389DS {{ dirsrv_serverid }}
  ansible.builtin.service:
    name: "dirsrv@{{ dirsrv_serverid }}"
    state: started
    enabled: yes
  become: true

# The setup script starts the server itself, but the service/target
# still needs to be enabled. In my tests I've found that enabling
# dirsrv@serverid is not enough, it still doesn't start automatically...
- name: Enable systemd target
  ansible.builtin.service:
    name: dirsrv.target
    enabled: yes
  become: true
